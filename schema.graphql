type Account @entity {
  id: ID!
  saleEvents: [SaleEvent!]! @derivedFrom (field:"account")
  transferEvents: [TransferEvent!]! @derivedFrom (field:"account")
  feeRecipients: [FeeEvent!]! @derivedFrom (field:"account")
  transaction: [Transaction!]! @derivedFrom (field: "account")
}

type MarketPlace @entity{
  id: ID!
  exchangeAddress: Bytes 
  saleEvents: [SaleEvent!]! @derivedFrom (field:"marketplace")
  transferEvents: [TransferEvent!]! @derivedFrom (field:"marketplace")
  feeRecipients: [FeeEvent!]! @derivedFrom (field:"marketplace")
  transaction: [Transaction!]! @derivedFrom (field: "marketplace")
}

type Contract @entity{
  id: ID!
  address: Bytes
  name: String
  version: String
  codename: String

}


type NFT @entity{
id: ID!
transaction: Transaction
}

type SaleEvent @entity{
  id: ID!
  sellHash: Bytes
  buyHash: Bytes
  maker: Bytes
  taker: Bytes
  price: BigInt
  account: Account
  marketplace: MarketPlace
  nft: NFT
  transaction: Transaction
}


type FeeEvent @entity{
  id: ID!
  takerRelayerFee: BigInt
  makerRelayerFee: BigInt
  takerProtocolFee: BigInt
  makerProtocolFee: BigInt
  feeRecipient: Bytes
  marketplace: MarketPlace
  account: Account
  contract: Contract
  transaction: Transaction
}


type TransferEvent @entity{
  id: ID!
  sender: Bytes!
  receiver: Bytes!
  account: Account
  marketplace: MarketPlace
  transaction: Transaction

}


type Auction @entity{
  id: ID!
  listingTime: BigInt
  expirationTime: BigInt
  basePrice: BigInt
  paymentToken: Bytes
  staticTarget: Bytes
  staticExtraData: Bytes
  extra: BigInt
  hash: Bytes
  orderbook: Boolean!
  transaction: Transaction

}


type Transaction @entity {
  id: ID!
  hash: Bytes
  date: BigInt
  block: BigInt
  account: Account
  marketplace: MarketPlace
  saleEvent: SaleEvent
  feeEvent: FeeEvent
  auction: Auction
  nft: NFT
}
